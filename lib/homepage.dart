import 'dart:io';
import 'dart:typed_data';

import 'package:artigeniusai/api_services.dart';
import 'package:artigeniusai/colors.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:screenshot/screenshot.dart';
import 'package:share_plus/share_plus.dart';

import 'arts_screen.dart';
import 'login.dart';

class HomePage extends StatefulWidget {
  const HomePage({Key? key}) : super(key: key);

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  var sizes = ['Small', 'Medium', 'Large'];
  var values = ["256x256", "512x512", "1024x1024"];
  String? dropValue;
  String image = "";
  var isloaded = false;
  var textController = TextEditingController();
  ScreenshotController screenshotController = ScreenshotController();

  Future<void> saveImageToFirebase(String imageUrl) async {
    try {
      final userId = FirebaseAuth.instance.currentUser?.uid;

      if (userId != null) {
        // Upload image URL and metadata to Firestore
        await FirebaseFirestore.instance.collection('images').add({
          'imageUrl': imageUrl,
          'userId': userId,

          // Add more metadata as needed (e.g., timestamp, description, etc.)
        });

        print(imageUrl);
        print(userId);

        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text("Image saved successfully"),
          ),
        );
      }
    } catch (e) {
      print('Error saving image: $e');
        
    }
  }

  shareImage() async {
    await screenshotController
        .capture(delay: const Duration(milliseconds: 100), pixelRatio: 1.0)
        .then((Uint8List? img) async {
      if (img != null) {
        final directory = (await getApplicationDocumentsDirectory()).path;
        final filename = "share.png";
        final imgpath = await File("$directory/$filename").create();
        await imgpath.writeAsBytes(img);

        Share.shareFiles([imgpath.path],
            text: "Generated by Artigenius AI- Created by Shubh Sardana");
      } else {
        print("failed to take a screenshot");
      }
    });
    // final directory = await getApplicationDocumentsDirectory();
    // final imagePath = await File('${directory.path}/image.png').create();
    // await imagePath.writeAsBytes(imageFile!);
    // await Share.shareFiles([imagePath.path]);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: false,
      appBar: AppBar(
        automaticallyImplyLeading: false,
        actions: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: ElevatedButton(
              onPressed: () {
                Navigator.push(context,
                    MaterialPageRoute(builder: (context) => ArtScreen()));
              },
              style: ElevatedButton.styleFrom(
                padding: EdgeInsets.only(left: 35, right: 25),
                backgroundColor: btnColor,
                // shape: StadiumBorder(),
              ),
              child: Text("My Arts"),
            ),
          ),
        ],
        centerTitle: false,
        title: Row(
          children: [
            ElevatedButton.icon(
              icon: Icon(Icons.logout),
              onPressed: () async {
                await FirebaseAuth.instance.signOut();
                Navigator.of(context).pushReplacement(
                  MaterialPageRoute(
                    builder: (context) => LoginPage(),
                  ),
                );
              },
              style: ElevatedButton.styleFrom(
                padding: EdgeInsets.all(8),
                backgroundColor: btnColor,
                // shape: StadiumBorder(),
              ),
              label: Text("Logout"),
            ),
            const Spacer(),
            Text(
              'Artigenius AI',
              textAlign: TextAlign.center,
              style: TextStyle(
                color: whiteColor,
                fontSize: 20.0,
                fontFamily: "poppins_bold",
              ),
            ),
          ],
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Column(
          children: [
            Expanded(
                child: Column(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                Row(
                  children: [
                    Expanded(
                      child: Container(
                        height: 44,
                        padding: const EdgeInsets.symmetric(
                            horizontal: 16, vertical: 4),
                        decoration: BoxDecoration(
                          color: whiteColor,
                          borderRadius: BorderRadius.circular(12.0),
                        ),
                        child: TextFormField(
                          controller: textController,
                          decoration: const InputDecoration(
                            hintText: "eg 'underwater earth black & white'",
                            border: InputBorder.none,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(
                      width: 12.0,
                    ),
                    Container(
                      height: 44,
                      padding: const EdgeInsets.symmetric(
                          horizontal: 8, vertical: 2),
                      decoration: BoxDecoration(
                        color: whiteColor,
                        borderRadius: BorderRadius.circular(12.0),
                      ),
                      child: DropdownButtonHideUnderline(
                        child: DropdownButton(
                          icon: Icon(
                            Icons.expand_more,
                            color: btnColor,
                          ),
                          value: dropValue,
                          hint: Text("Select Size"),
                          items: List.generate(
                            sizes.length,
                            (index) => DropdownMenuItem(
                              child: Text(sizes[index]),
                              value: sizes[index],
                            ),
                          ),
                          onChanged: ((value) {
                            setState(() {
                              dropValue = value.toString();
                            });
                          }),
                        ),
                      ),
                    ),
                  ],
                ),
                SizedBox(
                    width: 300,
                    height: 44,
                    child: ElevatedButton(
                      onPressed: () async {
                        if (textController.text.isNotEmpty &&
                            dropValue != null &&
                            dropValue!.isNotEmpty) {
                          setState(() {
                            isloaded = false;
                          });
                          String? generatedImage = await Api.generateImages(
                              textController.text, dropValue);
                          if (generatedImage != null) {
                            setState(() {
                              isloaded = true;
                              image = generatedImage;
                            });
                          } else {
                            ScaffoldMessenger.of(context).showSnackBar(
                              const SnackBar(
                                content: Text(
                                    "Failed to generate an image. Please check your input."),
                              ),
                            );
                          }
                        } else {
                          ScaffoldMessenger.of(context).showSnackBar(
                            const SnackBar(
                              content: Text("Please fill all the fields."),
                            ),
                          );
                        }
                      },
                      child: Text("Generate"),
                      style: ElevatedButton.styleFrom(
                          backgroundColor: btnColor, shape: StadiumBorder()),
                    )),
              ],
            )),
            Expanded(
                flex: 4,
                child: isloaded
                    ? Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Container(
                              clipBehavior: Clip.antiAlias,
                              decoration: BoxDecoration(
                                color: whiteColor,
                                borderRadius: BorderRadius.circular(12.0),
                              ),
                              child: Screenshot(
                                controller: screenshotController,
                                child: Image.network(
                                  image,
                                  fit: BoxFit.contain,
                                ),
                              )),
                          SizedBox(
                            height: 12,
                          ),
                          Row(
                            children: [
                              Expanded(
                                  child: ElevatedButton.icon(
                                icon: Icon(Icons.save),
                                onPressed: () {
                                  if (image.isNotEmpty) {
                                    saveImageToFirebase(image);
                                  } else {
                                    ScaffoldMessenger.of(context).showSnackBar(
                                      const SnackBar(
                                        content: Text(
                                            "No Image to Save. Please generate an image first"),
                                      ),
                                    );
                                  }
                                },
                                style: ElevatedButton.styleFrom(
                                  padding: EdgeInsets.all(8),
                                  backgroundColor: btnColor,
                                  shape: StadiumBorder(),
                                ),
                                label: Text("Save"),
                              )),
                              SizedBox(
                                width: 12,
                              ),
                              ElevatedButton.icon(
                                icon: Icon(Icons.share),
                                onPressed: () async {
                                  await shareImage();
                                  ScaffoldMessenger.of(context).showSnackBar(
                                    const SnackBar(
                                      content:
                                          Text("Image shared successfully"),
                                    ),
                                  );
                                },
                                style: ElevatedButton.styleFrom(
                                  padding: EdgeInsets.all(8),
                                  backgroundColor: btnColor,
                                  shape: StadiumBorder(),
                                ),
                                label: Text("Share"),
                              )
                            ],
                          )
                        ],
                      )
                    : Container(
                        alignment: Alignment.center,
                        decoration: BoxDecoration(
                          color: whiteColor,
                          borderRadius: BorderRadius.circular(12.0),
                        ),
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Image.asset("assets/images/Settings.gif"),
                            SizedBox(
                              height: 12,
                            ),
                            Text(
                              "Waiting for image to be generated",
                              style: TextStyle(
                                fontSize: 16.0,
                              ),
                            ),
                          ],
                        ),
                      )),
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Text(
                "Developed by: Shubh Sardana",
                style: TextStyle(color: whiteColor, fontSize: 14.0),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
